(($) ->
  $.widget 'ransack.ransack_search_form',
    options: {}

    _create: ->
      el = @element
      el.on 'click', '.add_fields',                $.proxy(@add_fields, this)
      el.on 'click', '.remove_fields',             $.proxy(@remove_fields, this)
      el.on 'change', 'select.ransack_predicate',  $.proxy(@predicate_changed, this)
      el.on 'change', 'select.ransack_attribute',  $.proxy(@attribute_changed, this)
      el.on 'change', 'input.ransack_query_multi', $.proxy(@multi_query_changed, this)

      # Store initial predicates and set up Select2 on select lists in .filters
      containers = el.find('.filters')
      if Select2?
        @init_select2(containers)
      @store_initial_predicates(containers)

      if $.ransack.button_group_select?
        @init_button_group_select(@element)

      # show spinner and disable the form when the search is underway
      el.find("form input:submit").click $.proxy(@form_submit, this)

      # Fire change event for any existing selects.
      el.find(".filters select").change()

    attribute_changed: (e) ->
      target = $(e.currentTarget)
      selected = target.find('option:selected')
      column_type = selected.data('type')

      base_id = target.attr('id').slice(0, -8)
      predicate_select  = @element.find("select##{base_id}p")
      query_input = $("input##{base_id}v_0_value")

      # Initialize datepicker if column is date/datetime/time
      $.proxy(@init_datetimepicker, this)(base_id)

      # Handle association columns with AJAX autocomplete
      if selected.data('ajax-url') and Select2?
        controller = selected.data('controller')
        @force_eq_predicate(base_id)

        # Set up Select2 for query input
        query_input.val('')
        query_input.select2
          placeholder: "Search #{selected.data('ajax-entity')}"
          minimumInputLength: 1
          allowClear: true
          ajax:
            url: selected.data('ajax-url')
            dataType: 'json'
            type: selected.data('ajax-type')
            data: (query, page) ->
              obj = {}
              obj[selected.data('ajax-key')] = query
              obj
            results: (data, page) ->
              {results: $.map(data, (text, id) -> {id: id, text: text}) }

      # Handle columns with options detected from validates :inclusion
      else if selected.data('select-options') and Select2?
        @force_eq_predicate(base_id)
        query_input.val('')
        query_input.select2
          data: selected.data('select-options')
          placeholder: "Please select a #{selected.val()}"
          allowClear: true

      # Handle regular columns
      else
        if Select2?
          predicate_select2 = @element.find("#s2id_#{base_id}p")
          predicate_select2.select2("enable")

          # If Select2 is on query input, remove and set defaults
          if (query_select2 = @element.find("#s2id_#{base_id}v_0_value")).length > 0
            query_input.select2('destroy')
            query_input.val('')
            previous_val = ''
          else
            previous_val = predicate_select.val()

        # Build array of supported predicates
        available = predicate_select.data['predicates']
        predicates = Ransack.type_predicates[column_type] || []
        predicates = $.map predicates, (p) -> [p, Ransack.predicates[p]]

        # Remove all predicates, and add any supported predicates
        predicate_select.find('option').each (i, o) -> $(o).remove()

        $.each available, (i, p) =>
          [predicate, label] = [p[0], p[1]]

          # Also allow compound predicates, unless column
          # is a date type. (No support for any/all on dates yet.)
          if !column_type?.match(/date|time/)
            p_key = predicate.replace(/_(any|all)$/, '')
          else
            p_key = predicate

          if p_key in predicates
            # Get alternative predicate label depending on column type
            label = @alt_predicate_label_or_default(predicate, column_type, label)
            predicate_select.append $("<option value=#{predicate}>#{label}</option>")

        # Select first predicate if current selection is invalid
        if Select2?
          predicate_select.select2('val', previous_val)

        # Run predicate_changed callback
        predicate_select.change()

      return true

    predicate_changed: (e) ->
      target   = $(e.currentTarget)
      p = target.val() || ""
      base_id = target.attr('id').slice(0, -1)
      query_input = $("input##{base_id}v_0_value")

      # We need to use a dummy input to handle multiple terms
      multi_id = query_input.attr('id') + '_multi'
      multi_input = @element.find("##{multi_id}")

      if Select2?
        # Turn query input into Select2 tag list when query accepts multiple values
        if p in ["in", "not_in"] || p.match(/_(all|any)$/)
          # Add dummy 'multi' input for select2 if not already added
          if multi_input.length == 0
            @setup_multi_query_input(target, query_input, multi_id)
          return
        else
          if multi_input.length > 0
            # Otherwise, remove Select2 from multi-query input, and remove input
            multi_input.select2('destroy').remove()
            query_input.val('').show()

      # Hide query input when not needed
      if p in ["true", "false", "blank", "present", "null", "not_null"]
        query_input.val("true")
        query_input.hide()
        query_input.parent().find('.ui-datepicker-trigger').hide()
      # Otherwise, reset query input and show datepicker trigger if present
      else
        unless query_input.is(":visible")
          query_input.val("")
          query_input.show()
          query_input.parent().find('.ui-datepicker-trigger').show()


    # Dsiables predicate choices and sets it to 'eq'
    force_eq_predicate: (base_id) ->
      predicate_select  = @element.find("select##{base_id}p")
      # Clear predicates, and set 'eq' predicate
      predicate_select.find('option').each (i, o) -> $(o).remove()
      predicate_select.append $('<option selected="selected" value="eq">is</option>')

      if Select2?
        predicate_select2 = @element.find("#s2id_#{base_id}p")
        # Disable predicate Select2
        predicate_select2.select2('disable')
        predicate_select2.select2('val', 'eq')

    # Attempts to find a predicate translation for the specific column type,
    # or returns the default label.
    # For example, 'lt' on an integer column will be translated to 'is less than',
    # while a date column will have it translated as 'is before'.
    # This is mainly to avoid confusion when building conditions using Chronic strings.
    # 'created_at is less than 2 weeks ago' is misleading, and
    # 'created_at is before 2 weeks ago' is much easier to understand.
    alt_predicate_label_or_default: (p, type, default_label) ->
      return default_label unless Ransack?.alt_predicates_i18n?
      alt_labels = {}
      switch type
        when "date", "datetime", "time"
          alt_labels = Ransack.alt_predicates_i18n["date"] || {}
        else
          alt_labels = Ransack.alt_predicates_i18n[type] || {}

      alt_labels[p] || default_label

    multi_query_changed: (e) ->
      target = $(e.currentTarget)

      # Fetch all query inputs for condition
      base_name = target.data('base-name')
      inputs = @element.find("input[name^=\"#{base_name}\"]")

      # Set the original query input to the first value before shifting inputs and values
      $(inputs[0]).val(e.val[0])

      inputs = inputs.slice(1)
      values = e.val.slice(1)

      # If value was added after the first value, then append extra input with added value
      if values.length && e.added
        @add_query_input(target, base_name, inputs.length + 1, e.added.text)

      else if e.removed
        # If value was removed, clear all extra inputs, then rebuild inputs for extra terms
        inputs.remove()
        $.each values, (i, v) =>
          @add_query_input(target, base_name, i + 1, v)

    setup_multi_query_input: (predicate_el, query_el, multi_id) ->
      base_name = predicate_el.attr('name').slice(0, -3) + '[v]'
      query_el.after(
        $('<input class="ransack_query_multi" id="' + multi_id + '" ' +
          'style="width:' + (query_el.width() * 2) + 'px;" ' +
          'data-base-name="' + base_name + '" />'))

      # Fetch all existing values
      inputs = @element.find("input[name^=\"#{base_name}\"]")
      values = $.map inputs, (el) ->
        el.value
      # Hide all query inputs
      inputs.hide()

      if Select2?
        # Find newly created input and setup Select2
        multi_query = @element.find('#' + multi_id)
        multi_query.select2
          tags: []
          tokenSeparators: [',']
          formatNoMatches: (t) ->
            "Add a search term"
        multi_query.select2('val', values)

    add_query_input: (base_input, base_name, id, value) ->
      base_input.after $('<input name="'+base_name+'['+id+'][value]" '+
                         'value="'+value+'" style="display:none;" />')

    form_submit: (e) ->
      @element.css({ opacity: 0.4 })
      true

    add_fields: (e) ->
      target  = $(e.currentTarget)
      type    = target.data("fieldType")
      content = target.data("content")
      new_id = new Date().getTime()
      regexp = new RegExp('new_' + type, 'g')
      container = target.closest('p')
      container.before content.replace(regexp, new_id)
      prev_container = container.prev()

      if Select2?
        @init_select2(prev_container)

      if $.ransack.button_group_select?
        @init_button_group_select(prev_container)

      @store_initial_predicates(prev_container)
      # Fire change event on any new selects.
      container.prev().find("select").change()
      false

    remove_fields: (e) ->
      target    = $(e.currentTarget)
      container = target.closest('.fields')
      if (container.siblings().length > 1)
        container.remove()
      else
        container.parent().closest('.fields').remove()
      false

    store_initial_predicates: (container) ->
      # Store current predicates in data attribute
      predicate_select = container.find('select.ransack_predicate:first')
      unless predicate_select.data['predicates']
        predicates = []
        predicate_select.find('option').each (i, o) ->
          o = $(o)
          predicates.push [o.val(), o.text()]
        predicate_select.data['predicates'] = predicates

    init_select2: (container) ->
      container.find('select.ransack_predicate').select2
        width: '160px'
        formatNoMatches: (term) ->
          "Select a field first"

      container.find('select.ransack_attribute').select2
        width: '230px'
        placeholder: "Select a Field"
        allowClear: true
        formatSelection: (object, container) ->
          # Return 'Model: field' unless column is on root model
          if !object.element || $(object.element).data('root-model')
            object.text
          else
            group_label = $(object.element).parent().attr('label')
            # Avoid labels like 'Contact: Contact'
            if group_label == object.text
              object.text
            else if group_label?
              group_label + ': ' + object.text
            else
              object.text

      @element.find('select.ransack_sort').select2
        width: '230px'
        placeholder: "Select a Field"

    init_button_group_select: (containers) ->
      containers.find('select.ransack_combinator, select.ransack_sort_order').button_group_select()

    init_datetimepicker: (base_id) ->
      if $.ui?.timepicker?
        query_input = @element.find("input##{base_id}v_0_value")
        selected_attr = @element.find("select##{base_id}a_0_name option:selected")

        # Clear any datepicker from query input first
        query_input.datepicker('destroy')

        datepicker_options =
          changeMonth: true
          constrainInput: false
          dateFormat: 'yy-mm-dd'
          buttonImage: "<%= asset_path('ransack_ui/calendar.png') %>"
          buttonImageOnly: true
          showOn: 'button'
          # Always prefer custom input text over selected date
          onClose: (date) -> $(this).val(date)

        # Show datepicker button for dates
        switch selected_attr.data('type')
          when "date"
            query_input.datepicker(datepicker_options)
          when "datetime"
            query_input.datetimepicker(datepicker_options)
          when "time"
            query_input.datetimepicker $.extend(datepicker_options, {timeOnly: true})
) jQuery
